(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{499:function(e,n,a){"use strict";a.r(n);var t=a(23),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"实现-virtual-dom-下的一个-vnode-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-virtual-dom-下的一个-vnode-节点"}},[e._v("#")]),e._v(" 实现 Virtual DOM 下的一个 VNode 节点")]),e._v(" "),a("h2",{attrs:{id:"什么是vnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是vnode"}},[e._v("#")]),e._v(" 什么是VNode")]),e._v(" "),a("p",[e._v("我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。")]),e._v(" "),a("h2",{attrs:{id:"实现一个vnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个vnode"}},[e._v("#")]),e._v(" 实现一个VNode")]),e._v(" "),a("p",[e._v("VNode 归根结底就是一个 JavaScript 对象，只要这个类的一些属性可以正确直观地描述清楚当前节点的信息即可。我们来实现一个简单的 "),a("code",[e._v("VNode")]),e._v(" 类，加入一些基本属性，为了便于理解，我们先不考虑复杂的情况。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class VNode {\n    constructor (tag, data, children, text, elm) {\n        /*当前节点的标签名*/\n        this.tag = tag;\n        /*当前节点的一些数据信息，比如props、attrs等数据*/\n        this.data = data;\n        /*当前节点的子节点，是一个数组*/\n        this.children = children;\n        /*当前节点的文本*/\n        this.text = text;\n        /*当前虚拟节点对应的真实dom节点*/\n        this.elm = elm;\n    }\n}\n\n")])])]),a("p",[e._v("比如我目前有这么一个 Vue 组件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<template>\n  <span class="demo" v-show="isShow">\n    This is a span.\n  </span>\n</template>\n\n')])])]),a("p",[e._v("用 JavaScript 代码形式就是这样的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function render () {\n    return new VNode(\n        'span',\n        {\n            /* 指令集合数组 */\n            directives: [\n                {\n                    /* v-show指令 */\n                    rawName: 'v-show',\n                    expression: 'isShow',\n                    name: 'show',\n                    value: true\n                }\n            ],\n            /* 静态class */\n            staticClass: 'demo'\n        },\n        [ new VNode(undefined, undefined, undefined, 'This is a span.') ]\n    );\n}\n\n")])])]),a("p",[e._v("看看转换成 VNode 以后的情况。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n    tag: 'span',\n    data: {\n        /* 指令集合数组 */\n        directives: [\n            {\n                /* v-show指令 */\n                rawName: 'v-show',\n                expression: 'isShow',\n                name: 'show',\n                value: true\n            }\n        ],\n        /* 静态class */\n        staticClass: 'demo'\n    },\n    text: undefined,\n    children: [\n        /* 子节点是一个文本VNode节点 */\n        {\n            tag: undefined,\n            data: undefined,\n            text: 'This is a span.',\n            children: undefined\n        }\n    ]\n}\n\n")])])]),a("p",[e._v("然后我们可以将 VNode 进一步封装一下，可以实现一些产生常用 VNode 的方法。")]),e._v(" "),a("ul",[a("li",[e._v("创建一个空节点")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function createEmptyVNode () {\n    const node = new VNode();\n    node.text = '';\n    return node;\n}\n\n")])])]),a("ul",[a("li",[e._v("创建一个文本节点")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val));\n}\n\n")])])]),a("ul",[a("li",[e._v("克隆一个 VNode 节点")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function cloneVNode (node) {\n    const cloneVnode = new VNode(\n        node.tag,\n        node.data,\n        node.children,\n        node.text,\n        node.elm\n    );\n    return cloneVnode;\n}\n\n")])])]),a("p",[e._v("总的来说，VNode 就是一个 JavaScript 对象，用 JavaScript 对象的属性来描述当前节点的一些状态，用 VNode 节点的形式来模拟一棵 Virtual DOM 树。")]),e._v(" "),a("p",[e._v("注：本节代码参考"),a("a",{attrs:{href:"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8A%E5%AE%9E%E7%8E%B0%20Virtual%20DOM%20%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%20VNode%20%E8%8A%82%E7%82%B9%E3%80%8B.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("《实现 Virtual DOM 下的一个 VNode 节点》"),a("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);n.default=s.exports}}]);