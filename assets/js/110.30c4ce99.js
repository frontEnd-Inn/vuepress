(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{496:function(e,t,n){"use strict";n.r(t);var a=n(23),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"template-模板是怎样通过-compile-编译的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#template-模板是怎样通过-compile-编译的"}},[e._v("#")]),e._v(" template 模板是怎样通过 Compile 编译的")]),e._v(" "),n("h2",{attrs:{id:"compile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compile"}},[e._v("#")]),e._v(" Compile")]),e._v(" "),n("p",[n("code",[e._v("compile")]),e._v(" 编译可以分成 "),n("code",[e._v("parse")]),e._v("、"),n("code",[e._v("optimize")]),e._v(" 与 "),n("code",[e._v("generate")]),e._v(" 三个阶段，最终需要得到 render function。这部分内容不算 Vue.js 的响应式核心，只是用来编译的，笔者认为在精力有限的情况下不需要追究其全部的实现细节，能够把握如何解析的大致流程即可。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/19/1606ec3d306ab28f?w=824&h=496&f=png&s=37271",alt:""}})]),e._v(" "),n("p",[e._v("由于解析过程比较复杂，直接上代码可能会导致不了解这部分内容的同学一头雾水。所以笔者准备提供一个 template 的示例，通过这个示例的变化来看解析的过程。但是解析的过程及结果都是将最重要的部分抽离出来展示，希望能让读者更好地了解其核心部分的实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div :class="c" class="demo" v-if="isShow">\n    <span v-for="item in sz">{{item}}</span>\n</div>\n\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var html = \'<div :class="c" class="demo" v-if="isShow"><span v-for="item in sz">{{item}}</span></div>\';\n\n')])])]),n("p",[e._v("接下来的过程都会依赖这个示例来进行。")]),e._v(" "),n("h2",{attrs:{id:"parse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parse"}},[e._v("#")]),e._v(" parse")]),e._v(" "),n("p",[e._v("首先是 "),n("code",[e._v("parse")]),e._v("，"),n("code",[e._v("parse")]),e._v(" 会用正则等方式将 template 模板中进行字符串解析，得到指令、class、style等数据，形成 AST（"),n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9",target:"_blank",rel:"noopener noreferrer"}},[e._v("在计算机科学中，抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。"),n("OutboundLink")],1),e._v("）。")]),e._v(" "),n("p",[e._v("这个过程比较复杂，会涉及到比较多的正则进行字符串解析，我们来看一下得到的 AST 的样子。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n    /* 标签属性的map，记录了标签上属性 */\n    'attrsMap': {\n        ':class': 'c',\n        'class': 'demo',\n        'v-if': 'isShow'\n    },\n    /* 解析得到的:class */\n    'classBinding': 'c',\n    /* 标签属性v-if */\n    'if': 'isShow',\n    /* v-if的条件 */\n    'ifConditions': [\n        {\n            'exp': 'isShow'\n        }\n    ],\n    /* 标签属性class */\n    'staticClass': 'demo',\n    /* 标签的tag */\n    'tag': 'div',\n    /* 子标签数组 */\n    'children': [\n        {\n            'attrsMap': {\n                'v-for': \"item in sz\"\n            },\n            /* for循环的参数 */\n            'alias': \"item\",\n            /* for循环的对象 */\n            'for': 'sz',\n            /* for循环是否已经被处理的标记位 */\n            'forProcessed': true,\n            'tag': 'span',\n            'children': [\n                {\n                    /* 表达式，_s是一个转字符串的函数 */\n                    'expression': '_s(item)',\n                    'text': '{{item}}'\n                }\n            ]\n        }\n    ]\n}\n\n\n")])])]),n("p",[e._v("最终得到的 AST 通过一些特定的属性，能够比较清晰地描述出标签的属性以及依赖关系。")]),e._v(" "),n("p",[e._v("接下来我们用代码来讲解一下如何使用正则来把 template 编译成我们需要的 AST 的。")]),e._v(" "),n("h3",{attrs:{id:"正则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[e._v("#")]),e._v(" 正则")]),e._v(" "),n("p",[e._v("首先我们定义一下接下来我们会用到的正则。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nconst singleAttrIdentifier = /([^\\s\"'<>/=]+)/\nconst singleAttrAssign = /(?:=)/\nconst singleAttrValues = [\n  /\"([^\"]*)\"+/.source,\n  /'([^']*)'+/.source,\n  /([^\\s\"'=<>`]+)/.source\n]\nconst attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n)\n\nconst qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')'\nconst startTagOpen = new RegExp('^<' + qnameCapture)\nconst startTagClose = /^\\s*(\\/?)>/\n\nconst endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>')\n\nconst defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g\n\nconst forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/\n\n")])])]),n("h2",{attrs:{id:"advance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#advance"}},[e._v("#")]),e._v(" advance")]),e._v(" "),n("p",[e._v("因为我们解析 template 采用循环进行字符串匹配的方式，所以每匹配解析完一段我们需要将已经匹配掉的去掉，头部的指针指向接下来需要匹配的部分。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function advance (n) {\n    index += n\n    html = html.substring(n)\n}\n\n")])])]),n("p",[e._v("举个例子，当我们把第一个 div 的头标签全部匹配完毕以后，我们需要将这部分除去，也就是向右移动 43 个字符。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160d00562f38ab39?w=1086&h=199&f=png&s=20654",alt:""}})]),e._v(" "),n("p",[e._v("调用 "),n("code",[e._v("advance")]),e._v(" 函数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("advance(43);\n\n")])])]),n("p",[e._v("得到结果")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160d0058331006a5?w=1096&h=198&f=png&s=22012",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"parsehtml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parsehtml"}},[e._v("#")]),e._v(" parseHTML")]),e._v(" "),n("p",[e._v("首先我们需要定义个 "),n("code",[e._v("parseHTML")]),e._v(" 函数，在里面我们循环解析 template 字符串。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function parseHTML () {\n    while(html) {\n        let textEnd = html.indexOf('<');\n        if (textEnd === 0) {\n            if (html.match(endTag)) {\n                //...process end tag\n                continue;\n            }\n            if (html.match(startTagOpen)) {\n                //...process start tag\n                continue;\n            }\n        } else {\n            //...process text\n            continue;\n        }\n    }\n}\n\n")])])]),n("p",[n("code",[e._v("parseHTML")]),e._v(" 会用 "),n("code",[e._v("while")]),e._v(" 来循环解析 template ，用正则在匹配到标签头、标签尾以及文本的时候分别进行不同的处理。直到整个 template 被解析完毕。")]),e._v(" "),n("h3",{attrs:{id:"parsestarttag"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parsestarttag"}},[e._v("#")]),e._v(" parseStartTag")]),e._v(" "),n("p",[e._v("我们来写一个 "),n("code",[e._v("parseStartTag")]),e._v(' 函数，用来解析起始标签（"')]),e.isShow?n("div",{staticClass:"demo",class:e.c},[e._v('"部分的内容）。'),n("p"),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function parseStartTag () {\n    const start = html.match(startTagOpen);\n    if (start) {\n        const match = {\n            tagName: start[1],\n            attrs: [],\n            start: index\n        }\n        advance(start[0].length);\n\n        let end, attr\n        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n            advance(attr[0].length)\n            match.attrs.push({\n                name: attr[1],\n                value: attr[3]\n            });\n        }\n        if (end) {\n            match.unarySlash = end[1];\n            advance(end[0].length);\n            match.end = index;\n            return match\n        }\n    }\n}\n\n")])])]),n("p",[e._v("首先用 "),n("code",[e._v("startTagOpen")]),e._v(" 正则得到标签的头部，可以得到 "),n("code",[e._v("tagName")]),e._v("（标签名称），同时我们需要一个数组 "),n("code",[e._v("attrs")]),e._v(" 用来存放标签内的属性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const start = html.match(startTagOpen);\nconst match = {\n    tagName: start[1],\n    attrs: [],\n    start: index\n}\nadvance(start[0].length);\n\n")])])]),n("p",[e._v("接下来使用 "),n("code",[e._v("startTagClose")]),e._v(" 与 "),n("code",[e._v("attribute")]),e._v(" 两个正则分别用来解析标签结束以及标签内的属性。这段代码用 "),n("code",[e._v("while")]),e._v(" 循环一直到匹配到 "),n("code",[e._v("startTagClose")]),e._v(" 为止，解析内部所有的属性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let end, attr\nwhile (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n    advance(attr[0].length)\n    match.attrs.push({\n        name: attr[1],\n        value: attr[3]\n    });\n}\nif (end) {\n    match.unarySlash = end[1];\n    advance(end[0].length);\n    match.end = index;\n    return match\n}\n\n")])])]),n("h2",{attrs:{id:"stack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[e._v("#")]),e._v(" stack")]),e._v(" "),n("p",[e._v("此外，我们需要维护一个 "),n("strong",[e._v("stack")]),e._v(" 栈来保存已经解析好的标签头，这样我们可以根据在解析尾部标签的时候得到所属的层级关系以及父标签。同时我们定义一个 "),n("code",[e._v("currentParent")]),e._v(" 变量用来存放当前标签的父标签节点的引用， "),n("code",[e._v("root")]),e._v(" 变量用来指向根标签节点。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const stack = [];\nlet currentParent, root;\n\n")])])]),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/7/160d0f34a5642ce8",alt:""}})]),e._v(" "),n("p",[e._v("知道这个以后，我们优化一下 "),n("code",[e._v("parseHTML")]),e._v(" ，在 "),n("code",[e._v("startTagOpen")]),e._v(" 的 "),n("code",[e._v("if")]),e._v(" 逻辑中加上新的处理。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (html.match(startTagOpen)) {\n    const startTagMatch = parseStartTag();\n    const element = {\n        type: 1,\n        tag: startTagMatch.tagName,\n        lowerCasedTag: startTagMatch.tagName.toLowerCase(),\n        attrsList: startTagMatch.attrs,\n        attrsMap: makeAttrsMap(startTagMatch.attrs),\n        parent: currentParent,\n        children: []\n    }\n\n    if(!root){\n        root = element\n    }\n\n    if(currentParent){\n        currentParent.children.push(element);\n    }\n\n    stack.push(element);\n    currentParent = element;\n    continue;\n}\n\n")])])]),n("p",[e._v("我们将 "),n("code",[e._v("startTagMatch")]),e._v(" 得到的结果首先封装成 "),n("code",[e._v("element")]),e._v(" ，这个就是最终形成的 AST 的节点，标签节点的 type 为 1。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const startTagMatch = parseStartTag();\nconst element = {\n    type: 1,\n    tag: startTagMatch.tagName,\n    attrsList: startTagMatch.attrs,\n    attrsMap: makeAttrsMap(startTagMatch.attrs),\n    parent: currentParent,\n    children: []\n}\n\n")])])]),n("p",[e._v("然后让 "),n("code",[e._v("root")]),e._v(" 指向根节点的引用。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if(!root){\n    root = element\n}\n\n")])])]),n("p",[e._v("接着我们将当前节点的 "),n("code",[e._v("element")]),e._v(" 放入父节点 "),n("code",[e._v("currentParent")]),e._v(" 的 "),n("code",[e._v("children")]),e._v(" 数组中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if(currentParent){\n    currentParent.children.push(element);\n}\n\n")])])]),n("p",[e._v("最后将当前节点 "),n("code",[e._v("element")]),e._v(" 压入 stack 栈中，并将 "),n("code",[e._v("currentParent")]),e._v(" 指向当前节点，因为接下去下一个解析如果还是头标签或者是文本的话，会成为当前节点的子节点，如果是尾标签的话，那么将会从栈中取出当前节点，这种情况我们接下来要讲。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("stack.push(element);\ncurrentParent = element;\ncontinue;\n\n")])])]),n("p",[e._v("其中的 "),n("code",[e._v("makeAttrsMap")]),e._v(" 是将 attrs 转换成 map 格式的一个方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function makeAttrsMap (attrs) {\n    const map = {}\n    for (let i = 0, l = attrs.length; i < l; i++) {\n        map[attrs[i].name] = attrs[i].value;\n    }\n    return map\n}\n\n")])])]),n("h3",{attrs:{id:"parseendtag"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parseendtag"}},[e._v("#")]),e._v(" parseEndTag")]),e._v(" "),n("p",[e._v("同样，我们在 "),n("code",[e._v("parseHTML")]),e._v(" 中加入对尾标签的解析函数，为了匹配如“")])]):e._e(),e._v("”。"),n("p"),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const endTagMatch = html.match(endTag)\n if (endTagMatch) {\n    advance(endTagMatch[0].length);\n    parseEndTag(endTagMatch[1]);\n    continue;\n}\n\n")])])]),n("p",[e._v("用 "),n("code",[e._v("parseEndTag")]),e._v(" 来解析尾标签，它会从 stack 栈中取出最近的跟自己标签名一致的那个元素，将 "),n("code",[e._v("currentParent")]),e._v(" 指向那个元素，并将该元素之前的元素都从 stack 中出栈。")]),e._v(" "),n("p",[e._v("这里可能有同学会问，难道解析的尾元素不应该对应 stack 栈的最上面的一个元素才对吗？")]),e._v(" "),n("p",[e._v("其实不然，比如说可能会存在自闭合的标签，如“"),n("br"),e._v("”，或者是写了“"),n("span",[e._v("”但是没有加上“< /span>”的情况，这时候就要找到 stack 中的第二个位置才能找到同名标签。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function parseEndTag (tagName) {\n    let pos;\n    for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === tagName.toLowerCase()) {\n            break;\n        }\n    }\n\n    if (pos >= 0) {\n        stack.length = pos;\n        currentParent = stack[pos]; \n    }   \n}\n\n")])])]),n("h3",{attrs:{id:"parsetext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parsetext"}},[e._v("#")]),e._v(" parseText")]),e._v(" "),n("p",[e._v("最后是解析文本，这个比较简单，只需要将文本取出，然后有两种情况，一种是普通的文本，直接构建一个节点 push 进当前 "),n("code",[e._v("currentParent")]),e._v(" 的 children 中即可。还有一种情况是文本是如“"+e._s(e.item)+"”这样的 Vue.js 的表达式，这时候我们需要用 "),n("code",[e._v("parseText")]),e._v(" 来将表达式转化成代码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("text = html.substring(0, textEnd)\nadvance(textEnd)\nlet expression;\nif (expression = parseText(text)) {\n    currentParent.children.push({\n        type: 2,\n        text,\n        expression\n    });\n} else {\n    currentParent.children.push({\n        type: 3,\n        text,\n    });\n}\ncontinue;\n\n")])])]),n("p",[e._v("我们会用到一个 "),n("code",[e._v("parseText")]),e._v(" 函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function parseText (text) {\n    if (!defaultTagRE.test(text)) return;\n\n    const tokens = [];\n    let lastIndex = defaultTagRE.lastIndex = 0\n    let match, index\n    while ((match = defaultTagRE.exec(text))) {\n        index = match.index\n        \n        if (index > lastIndex) {\n            tokens.push(JSON.stringify(text.slice(lastIndex, index)))\n        }\n        \n        const exp = match[1].trim()\n        tokens.push(`_s(${exp})`)\n        lastIndex = index + match[0].length\n    }\n\n    if (lastIndex < text.length) {\n        tokens.push(JSON.stringify(text.slice(lastIndex)))\n    }\n    return tokens.join('+');\n}\n\n")])])]),n("p",[e._v("我们使用一个 "),n("code",[e._v("tokens")]),e._v(" 数组来存放解析结果，通过 "),n("code",[e._v("defaultTagRE")]),e._v(" 来循环匹配该文本，如果是普通文本直接 "),n("code",[e._v("push")]),e._v(" 到 "),n("code",[e._v("tokens")]),e._v(" 数组中去，如果是表达式（"+e._s(e.item)+"），则转化成“_s(${exp})”的形式。")]),e._v(" "),n("p",[e._v("举个例子，如果我们有这样一个文本。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<div>hello,{{name}}.</div>\n\n")])])]),n("p",[e._v("最终得到 "),n("code",[e._v("tokens")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("tokens = ['hello,', _s(name), '.'];\n\n")])])]),n("p",[e._v("最终通过 "),n("code",[e._v("join")]),e._v(" 返回表达式。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("'hello' + _s(name) + '.';\n\n")])])]),n("h3",{attrs:{id:"processif与processfor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processif与processfor"}},[e._v("#")]),e._v(" processIf与processFor")]),e._v(" "),n("p",[e._v("最后介绍一下如何处理“"),n("code",[e._v("v-if")]),e._v("”以及“"),n("code",[e._v("v-for")]),e._v("”这样的 Vue.js 的表达式的，这里我们只简单介绍两个示例中用到的表达式解析。")]),e._v(" "),n("p",[e._v("我们只需要在解析头标签的内容中加入这两个表达式的解析函数即可，在这时“"),n("code",[e._v("v-for")]),e._v("”之类指令已经在属性解析时存入了 "),n("code",[e._v("attrsMap")]),e._v(" 中了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (html.match(startTagOpen)) {\n    const startTagMatch = parseStartTag();\n    const element = {\n        type: 1,\n        tag: startTagMatch.tagName,\n        attrsList: startTagMatch.attrs,\n        attrsMap: makeAttrsMap(startTagMatch.attrs),\n        parent: currentParent,\n        children: []\n    }\n\n    processIf(element);\n    processFor(element);\n\n    if(!root){\n        root = element\n    }\n\n    if(currentParent){\n        currentParent.children.push(element);\n    }\n\n    stack.push(element);\n    currentParent = element;\n    continue;\n}\n\n")])])]),n("p",[e._v("首先我们需要定义一个 "),n("code",[e._v("getAndRemoveAttr")]),e._v(" 函数，用来从 "),n("code",[e._v("el")]),e._v(" 的 "),n("code",[e._v("attrsMap")]),e._v(" 属性或是 "),n("code",[e._v("attrsList")]),e._v(" 属性中取出 "),n("code",[e._v("name")]),e._v(" 对应值。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getAndRemoveAttr (el, name) {\n    let val\n    if ((val = el.attrsMap[name]) != null) {\n        const list = el.attrsList\n        for (let i = 0, l = list.length; i < l; i++) {\n            if (list[i].name === name) {\n                list.splice(i, 1)\n                break\n            }   \n        }\n    }\n    return val\n}\n\n")])])]),n("p",[e._v("比如说解析示例的 div 标签属性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("getAndRemoveAttr(el, 'v-for');\n\n")])])]),n("p",[e._v("可有得到“item in sz”。")]),e._v(" "),n("p",[e._v("有了这个函数这样我们就可以开始实现 "),n("code",[e._v("processFor")]),e._v(" 与 "),n("code",[e._v("processIf")]),e._v(" 了。")]),e._v(" "),n("p",[e._v("“v-for”会将指令解析成 "),n("code",[e._v("for")]),e._v(" 属性以及 "),n("code",[e._v("alias")]),e._v(" 属性，而“v-if”会将条件都存入 "),n("code",[e._v("ifConditions")]),e._v(" 数组中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function processFor (el) {\n    let exp;\n    if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n        const inMatch = exp.match(forAliasRE);\n        el.for = inMatch[2].trim();\n        el.alias = inMatch[1].trim();\n    }\n}\n\nfunction processIf (el) {\n    const exp = getAndRemoveAttr(el, 'v-if');\n    if (exp) {\n        el.if = exp;\n        if (!el.ifConditions) {\n            el.ifConditions = [];\n        }\n        el.ifConditions.push({\n            exp: exp,\n            block: el\n        });\n    }\n}\n\n")])])]),n("p",[e._v("到这里，我们已经把 "),n("code",[e._v("parse")]),e._v(" 的过程介绍完了，接下来看一下 "),n("code",[e._v("optimize")]),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"optimize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optimize"}},[e._v("#")]),e._v(" optimize")]),e._v(" "),n("p",[n("code",[e._v("optimize")]),e._v(" 主要作用就跟它的名字一样，用作「优化」。")]),e._v(" "),n("p",[e._v("这个涉及到后面要讲 "),n("code",[e._v("patch")]),e._v(" 的过程，因为 "),n("code",[e._v("patch")]),e._v(" 的过程实际上是将 VNode 节点进行一层一层的比对，然后将「差异」更新到视图上。那么一些静态节点是不会根据数据变化而产生变化的，这些节点我们没有比对的需求，是不是可以跳过这些静态节点的比对，从而节省一些性能呢？")]),e._v(" "),n("p",[e._v("那么我们就需要为静态的节点做上一些「标记」，在 "),n("code",[e._v("patch")]),e._v(" 的时候我们就可以直接跳过这些被标记的节点的比对，从而达到「优化」的目的。")]),e._v(" "),n("p",[e._v("经过 "),n("code",[e._v("optimize")]),e._v(" 这层的处理，每个节点会加上 "),n("code",[e._v("static")]),e._v(" 属性，用来标记是否是静态的。")]),e._v(" "),n("p",[e._v("得到如下结果。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n    'attrsMap': {\n        ':class': 'c',\n        'class': 'demo',\n        'v-if': 'isShow'\n    },\n    'classBinding': 'c',\n    'if': 'isShow',\n    'ifConditions': [\n        'exp': 'isShow'\n    ],\n    'staticClass': 'demo',\n    'tag': 'div',\n    /* 静态标志 */\n    'static': false,\n    'children': [\n        {\n            'attrsMap': {\n                'v-for': \"item in sz\"\n            },\n            'static': false,\n            'alias': \"item\",\n            'for': 'sz',\n            'forProcessed': true,\n            'tag': 'span',\n            'children': [\n                {\n                    'expression': '_s(item)',\n                    'text': '{{item}}',\n                    'static': false\n                }\n            ]\n        }\n    ]\n}\n\n\n")])])]),n("p",[e._v("我们用代码实现一下 "),n("code",[e._v("optimize")]),e._v(" 函数。")]),e._v(" "),n("h3",{attrs:{id:"isstatic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#isstatic"}},[e._v("#")]),e._v(" isStatic")]),e._v(" "),n("p",[e._v("首先实现一个 "),n("code",[e._v("isStatic")]),e._v(" 函数，传入一个 node 判断该 node 是否是静态节点。判断的标准是当 type 为 2（表达式节点）则是非静态节点，当 type 为 3（文本节点）的时候则是静态节点，当然，如果存在 "),n("code",[e._v("if")]),e._v(" 或者 "),n("code",[e._v("for")]),e._v("这样的条件的时候（表达式节点），也是非静态节点。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function isStatic (node) {\n    if (node.type === 2) {\n        return false\n    }\n    if (node.type === 3) {\n        return true\n    }\n    return (!node.if && !node.for);\n}\n\n")])])]),n("h3",{attrs:{id:"markstatic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#markstatic"}},[e._v("#")]),e._v(" markStatic")]),e._v(" "),n("p",[n("code",[e._v("markStatic")]),e._v(" 为所有的节点标记上 "),n("code",[e._v("static")]),e._v("，遍历所有节点通过 "),n("code",[e._v("isStatic")]),e._v(" 来判断当前节点是否是静态节点，此外，会遍历当前节点的所有子节点，如果子节点是非静态节点，那么当前节点也是非静态节点。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function markStatic (node) {\n    node.static = isStatic(node);\n    if (node.type === 1) {\n        for (let i = 0, l = node.children.length; i < l; i++) {\n            const child = node.children[i];\n            markStatic(child);\n            if (!child.static) {\n                node.static = false;\n            }\n        }\n    }\n}\n\n")])])]),n("h3",{attrs:{id:"markstaticroots"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#markstaticroots"}},[e._v("#")]),e._v(" markStaticRoots")]),e._v(" "),n("p",[e._v("接下来是 "),n("code",[e._v("markStaticRoots")]),e._v(" 函数，用来标记 "),n("code",[e._v("staticRoot")]),e._v("（静态根）。这个函数实现比较简单，简单来将就是如果当前节点是静态节点，同时满足该节点并不是只有一个文本节点左右子节点（作者认为这种情况的优化消耗会大于收益）时，标记 "),n("code",[e._v("staticRoot")]),e._v(" 为 true，否则为 false。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function markStaticRoots (node) {\n    if (node.type === 1) {\n        if (node.static && node.children.length && !(\n        node.children.length === 1 &&\n        node.children[0].type === 3\n        )) {\n            node.staticRoot = true;\n            return;\n        } else {\n            node.staticRoot = false;\n        }\n    }\n}\n\n")])])]),n("h3",{attrs:{id:"optimize-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optimize-2"}},[e._v("#")]),e._v(" optimize")]),e._v(" "),n("p",[e._v("有了以上的函数，就可以实现 "),n("code",[e._v("optimize")]),e._v(" 了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function optimize (rootAst) {\n    markStatic(rootAst);\n    markStaticRoots(rootAst);\n}\n\n")])])]),n("h2",{attrs:{id:"generate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate"}},[e._v("#")]),e._v(" generate")]),e._v(" "),n("p",[n("code",[e._v("generate")]),e._v(" 会将 AST 转化成 render funtion 字符串，最终得到 render 的字符串以及 staticRenderFns 字符串。")]),e._v(" "),n("p",[e._v("首先带大家感受一下真实的 Vue.js 编译得到的结果。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("with(this){\n    return (isShow) ? \n    _c(\n        'div',\n        {\n            staticClass: \"demo\",\n            class: c\n        },\n        _l(\n            (sz),\n            function(item){\n                return _c('span',[_v(_s(item))])\n            }\n        )\n    )\n    : _e()\n}\n\n")])])]),n("p",[e._v("看到这里可能会纳闷了，这些 "),n("code",[e._v("_c")]),e._v("，"),n("code",[e._v("_l")]),e._v(" 到底是什么？其实他们是 Vue.js 对一些函数的简写，比如说 "),n("code",[e._v("_c")]),e._v(" 对应的是 "),n("code",[e._v("createElement")]),e._v(" 这个函数。没关系，我们把它用 VNode 的形式写出来就会明白了，这个对接上一章写的 VNode 函数。")]),e._v(" "),n("p",[e._v("首先是第一层 div 节点。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("render () {\n    return isShow ? (new VNode('div', {\n        'staticClass': 'demo',\n        'class': c\n    }, [ /*这里还有子节点*/ ])) : createEmptyVNode();\n}\n\n")])])]),n("p",[e._v("然后我们在 "),n("code",[e._v("children")]),e._v(" 中加上第二层 span 及其子文本节点节点。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/* 渲染v-for列表 */\nfunction renderList (val, render) {\n    let ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n        ret[i] = render(val[i], i);\n    }\n}\n\nrender () {\n    return isShow ? (new VNode('div', {\n        'staticClass': 'demo',\n        'class': c\n    }, \n        /* begin */\n        renderList(sz, (item) => {\n            return new VNode('span', {}, [\n                createTextVNode(item);\n            ]);\n        })\n        /* end */\n    )) : createEmptyVNode();\n}\n\n")])])]),n("p",[e._v("那我们如何来实现一个 "),n("code",[e._v("generate")]),e._v(" 呢？")]),e._v(" "),n("h3",{attrs:{id:"genif"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#genif"}},[e._v("#")]),e._v(" genIf")]),e._v(" "),n("p",[e._v("首先实现一个处理 "),n("code",[e._v("if")]),e._v(" 条件的 "),n("code",[e._v("genIf")]),e._v(" 函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function genIf (el) {\n    el.ifProcessed = true;\n    if (!el.ifConditions.length) {\n        return '_e()';\n    }\n    return `(${el.ifConditions[0].exp})?${genElement(el.ifConditions[0].block)}: _e()`\n}\n\n")])])]),n("h3",{attrs:{id:"genfor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#genfor"}},[e._v("#")]),e._v(" genFor")]),e._v(" "),n("p",[e._v("然后是处理 "),n("code",[e._v("for")]),e._v(" 循环的函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function genFor (el) {\n    el.forProcessed = true;\n\n    const exp = el.for;\n    const alias = el.alias;\n    const iterator1 = el.iterator1 ? `,${el.iterator1}` : '';\n    const iterator2 = el.iterator2 ? `,${el.iterator2}` : '';\n\n    return `_l((${exp}),` +\n        `function(${alias}${iterator1}${iterator2}){` +\n        `return ${genElement(el)}` +\n    '})';\n}\n\n")])])]),n("h3",{attrs:{id:"gentext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gentext"}},[e._v("#")]),e._v(" genText")]),e._v(" "),n("p",[e._v("处理文本节点的函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function genText (el) {\n    return `_v(${el.expression})`;\n}\n\n")])])]),n("h3",{attrs:{id:"genelement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#genelement"}},[e._v("#")]),e._v(" genElement")]),e._v(" "),n("p",[e._v("接下来实现一下 "),n("code",[e._v("genElement")]),e._v("，这是一个处理节点的函数，因为它依赖 "),n("code",[e._v("genChildren")]),e._v(" 以及g "),n("code",[e._v("enNode")]),e._v(" ，所以这三个函数放在一起讲。")]),e._v(" "),n("p",[e._v("genElement会根据当前节点是否有 "),n("code",[e._v("if")]),e._v(" 或者 "),n("code",[e._v("for")]),e._v(" 标记然后判断是否要用 "),n("code",[e._v("genIf")]),e._v(" 或者 "),n("code",[e._v("genFor")]),e._v(" 处理，否则通过 "),n("code",[e._v("genChildren")]),e._v(" 处理子节点，同时得到 "),n("code",[e._v("staticClass")]),e._v("、"),n("code",[e._v("class")]),e._v(" 等属性。")]),e._v(" "),n("p",[n("code",[e._v("genChildren")]),e._v(" 比较简单，遍历所有子节点，通过 "),n("code",[e._v("genNode")]),e._v(" 处理后用“，”隔开拼接成字符串。")]),e._v(" "),n("p",[n("code",[e._v("genNode")]),e._v(" 则是根据 "),n("code",[e._v("type")]),e._v(" 来判断该节点是用文本节点 "),n("code",[e._v("genText")]),e._v(" 还是标签节点 "),n("code",[e._v("genElement")]),e._v(" 来处理。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function genNode (el) {\n    if (el.type === 1) {\n        return genElement(el);\n    } else {\n        return genText(el);\n    }\n}\n\nfunction genChildren (el) {\n    const children = el.children;\n\n    if (children && children.length > 0) {\n        return `${children.map(genNode).join(',')}`;\n    }\n}\n\nfunction genElement (el) {\n    if (el.if && !el.ifProcessed) {\n        return genIf(el);\n    } else if (el.for && !el.forProcessed) {\n        return genFor(el);\n    } else {\n        const children = genChildren(el);\n        let code;\n        code = `_c('${el.tag},'{\n            staticClass: ${el.attrsMap && el.attrsMap[':class']},\n            class: ${el.attrsMap && el.attrsMap['class']},\n        }${\n            children ? `,${children}` : ''\n        })`\n        return code;\n    }\n}\n\n")])])]),n("h3",{attrs:{id:"generate-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate-2"}},[e._v("#")]),e._v(" generate")]),e._v(" "),n("p",[e._v("最后我们使用上面的函数来实现 "),n("code",[e._v("generate")]),e._v("，其实很简单，我们只需要将整个 AST 传入后判断是否为空，为空则返回一个 div 标签，否则通过 "),n("code",[e._v("generate")]),e._v(" 来处理。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function generate (rootAst) {\n    const code = rootAst ? genElement(rootAst) : '_c(\"div\")'\n    return {\n        render: `with(this){return ${code}}`,\n    }\n}\n\n")])])]),n("p",[e._v("经历过这些过程以后，我们已经把 template 顺利转成了 render function 了，接下来我们将介绍 "),n("code",[e._v("patch")]),e._v(" 的过程，来看一下具体 VNode 节点如何进行差异的比对。")]),e._v(" "),n("p",[e._v("注：本节代码参考"),n("a",{attrs:{href:"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8Atemplate%20%E6%A8%A1%E6%9D%BF%E6%98%AF%E6%80%8E%E6%A0%B7%E9%80%9A%E8%BF%87%20Compile%20%E7%BC%96%E8%AF%91%E7%9A%84%E3%80%8B.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("《template 模板是怎样通过 Compile 编译的》"),n("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);t.default=s.exports}}]);