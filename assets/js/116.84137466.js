(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{502:function(e,n,d){"use strict";d.r(n);var t=d(23),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,d=e._self._c||n;return d("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[d("h1",{attrs:{id:"数据状态更新时的差异-diff-及-patch-机制"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#数据状态更新时的差异-diff-及-patch-机制"}},[e._v("#")]),e._v(" 数据状态更新时的差异 diff 及 patch 机制")]),e._v(" "),d("h2",{attrs:{id:"数据更新视图"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#数据更新视图"}},[e._v("#")]),e._v(" 数据更新视图")]),e._v(" "),d("p",[e._v("之前讲到，在对 "),d("code",[e._v("model")]),e._v(" 进行操作对时候，会触发对应 "),d("code",[e._v("Dep")]),e._v(" 中的 "),d("code",[e._v("Watcher")]),e._v(" 对象。"),d("code",[e._v("Watcher")]),e._v(" 对象会调用对应的 "),d("code",[e._v("update")]),e._v(" 来修改视图。最终是将新产生的 VNode 节点与老 VNode 进行一个 "),d("code",[e._v("patch")]),e._v(" 的过程，比对得出「差异」，最终将这些「差异」更新到视图上。")]),e._v(" "),d("p",[e._v("这一章就来介绍一下这个 "),d("code",[e._v("patch")]),e._v(" 的过程，因为 "),d("code",[e._v("patch")]),e._v(" 过程本身比较复杂，这一章的内容会比较多，但是不要害怕，我们逐块代码去看，一定可以理解。")]),e._v(" "),d("h2",{attrs:{id:"跨平台"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#跨平台"}},[e._v("#")]),e._v(" 跨平台")]),e._v(" "),d("p",[e._v("因为使用了 Virtual DOM 的原因，Vue.js具有了跨平台的能力，Virtual DOM 终归只是一些 JavaScript 对象罢了，那么最终是如何调用不同平台的 API 的呢？")]),e._v(" "),d("p",[e._v("这就需要依赖一层适配层了，将不同平台的 API 封装在内，以同样的接口对外提供。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("const nodeOps = {\n    setTextContent (text) {\n        if (platform === 'weex') {\n            node.parentNode.setAttr('value', text);\n        } else if (platform === 'web') {\n            node.textContent = text;\n        }\n    },\n    parentNode () {\n        //......\n    },\n    removeChild () {\n        //......\n    },\n    nextSibling () {\n        //......\n    },\n    insertBefore () {\n        //......\n    }\n}\n\n")])])]),d("p",[e._v("举个例子，现在我们有上述一个 "),d("code",[e._v("nodeOps")]),e._v(" 对象做适配，根据 platform 区分不同平台来执行当前平台对应的API，而对外则是提供了一致的接口，供 Virtual DOM 来调用。")]),e._v(" "),d("h2",{attrs:{id:"一些api"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#一些api"}},[e._v("#")]),e._v(" 一些API")]),e._v(" "),d("p",[e._v("接下来我们来介绍其他的一些 API，这些API在下面 "),d("code",[e._v("patch")]),e._v(" 的过程中会被用到，他们最终都会调用 "),d("code",[e._v("nodeOps")]),e._v(" 中的相应函数来操作平台。")]),e._v(" "),d("p",[d("code",[e._v("insert")]),e._v(" 用来在 "),d("code",[e._v("parent")]),e._v(" 这个父节点下插入一个子节点，如果指定了 "),d("code",[e._v("ref")]),e._v(" 则插入到 "),d("code",[e._v("ref")]),e._v(" 这个子节点前面。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function insert (parent, elm, ref) {\n    if (parent) {\n        if (ref) {\n            if (ref.parentNode === parent) {\n                nodeOps.insertBefore(parent, elm, ref);\n            }\n        } else {\n            nodeOps.appendChild(parent, elm)\n        }\n    }\n}\n\n")])])]),d("p",[d("code",[e._v("createElm")]),e._v(" 用来新建一个节点， "),d("code",[e._v("tag")]),e._v(" 存在创建一个标签节点，否则创建一个文本节点。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("\nfunction createElm (vnode, parentElm, refElm) {\n    if (vnode.tag) {\n        insert(parentElm, nodeOps.createElement(vnode.tag), refElm);\n    } else {\n        insert(parentElm, nodeOps.createTextNode(vnode.text), refElm);\n    }\n}\n\n")])])]),d("p",[d("code",[e._v("addVnodes")]),e._v(" 用来批量调用 "),d("code",[e._v("createElm")]),e._v(" 新建节点。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n        createElm(vnodes[startIdx], parentElm, refElm);\n    }\n}\n\n")])])]),d("p",[d("code",[e._v("removeNode")]),e._v(" 用来移除一个节点。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function removeNode (el) {\n    const parent = nodeOps.parentNode(el);\n    if (parent) {\n        nodeOps.removeChild(parent, el);\n    }\n}\n\n")])])]),d("p",[d("code",[e._v("removeVnodes")]),e._v(" 会批量调用 "),d("code",[e._v("removeNode")]),e._v(" 移除节点。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx]\n        if (ch) {\n            removeNode(ch.elm);\n        }\n    }\n}\n\n")])])]),d("h2",{attrs:{id:"patch"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[e._v("#")]),e._v(" patch")]),e._v(" "),d("p",[e._v("首先说一下 "),d("code",[e._v("patch")]),e._v(" 的核心 diff 算法，我们用 diff 算法可以比对出两颗树的「差异」，我们来看一下，假设我们现在有如下两颗树，它们分别是新老 VNode 节点，这时候到了 "),d("code",[e._v("patch")]),e._v(" 的过程，我们需要将他们进行比对。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/28/1609be691ed64525?w=706&h=295&f=jpeg&s=18300",alt:""}})]),e._v(" "),d("p",[e._v("diff 算法是通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间复杂度只有 O(n)，是一种相当高效的算法，如下图。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/12/28/1609be700a80c98a?w=628&h=214&f=png&s=20221",alt:""}})]),e._v(" "),d("p",[e._v("。")]),e._v(" "),d("p",[e._v("这张图中的相同颜色的方块中的节点会进行比对，比对得到「"),d("strong",[e._v("差异")]),e._v("」后将这些「"),d("strong",[e._v("差异")]),e._v("」更新到视图上。因为只进行同层级的比对，所以十分高效。")]),e._v(" "),d("p",[d("code",[e._v("patch")]),e._v(" 的过程相当复杂，我们先用简单的代码来看一下。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function patch (oldVnode, vnode, parentElm) {\n    if (!oldVnode) {\n        addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n    } else if (!vnode) {\n        removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n    } else {\n        if (sameVnode(oldVNode, vnode)) {\n            patchVnode(oldVNode, vnode);\n        } else {\n            removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n            addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n        }\n    }\n}\n\n")])])]),d("p",[e._v("因为 "),d("code",[e._v("patch")]),e._v(" 的主要功能是比对两个 VNode 节点，将「差异」更新到视图上，所以入参有新老两个 VNode 以及父节点的 element 。我们来逐步捋一下逻辑， "),d("code",[e._v("addVnodes")]),e._v(" 、 "),d("code",[e._v("removeVnodes")]),e._v(" 等函数后面会讲。")]),e._v(" "),d("p",[e._v("首先在 "),d("code",[e._v("oldVnode")]),e._v("（老 VNode 节点）不存在的时候，相当于新的 VNode 替代原本没有的节点，所以直接用 "),d("code",[e._v("addVnodes")]),e._v(" 将这些节点批量添加到 "),d("code",[e._v("parentElm")]),e._v(" 上。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (!oldVnode) {\n    addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n}\n\n")])])]),d("p",[e._v("然后同理，在 "),d("code",[e._v("vnode")]),e._v("（新 VNode 节点）不存在的时候，相当于要把老的节点删除，所以直接使用 "),d("code",[e._v("removeVnodes")]),e._v(" 进行批量的节点删除即可。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("else if (!vnode) {\n    removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n}\n\n")])])]),d("p",[e._v("最后一种情况，当 "),d("code",[e._v("oldVNode")]),e._v(" 与 "),d("code",[e._v("vnode")]),e._v(" 都存在的时候，需要判断它们是否属于 "),d("code",[e._v("sameVnode")]),e._v("（相同的节点）。如果是则进行patchVnode（比对 VNode ）操作，否则删除老节点，增加新节点。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (sameVnode(oldVNode, vnode)) {\n    patchVnode(oldVNode, vnode);\n} else {\n    removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n    addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n}\n\n")])])]),d("h2",{attrs:{id:"samevnode"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#samevnode"}},[e._v("#")]),e._v(" sameVnode")]),e._v(" "),d("p",[e._v("上面这些比较好理解，下面我们来看看什么情况下两个 VNode 会属于 "),d("code",[e._v("sameVnode")]),e._v(" （相同的节点）呢？")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function sameVnode () {\n    return (\n        a.key === b.key &&\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        (!!a.data) === (!!b.data) &&\n        sameInputType(a, b)\n    )\n}\n\nfunction sameInputType (a, b) {\n    if (a.tag !== 'input') return true\n    let i\n    const typeA = (i = a.data) && (i = i.attrs) && i.type\n    const typeB = (i = b.data) && (i = i.attrs) && i.type\n    return typeA === typeB\n}\n\n")])])]),d("p",[d("code",[e._v("sameVnode")]),e._v(" 其实很简单，只有当 "),d("code",[e._v("key")]),e._v("、 "),d("code",[e._v("tag")]),e._v("、 "),d("code",[e._v("isComment")]),e._v("（是否为注释节点）、 "),d("code",[e._v("data")]),e._v("同时定义（或不定义），同时满足当标签类型为 input 的时候 type 相同（某些浏览器不支持动态修改"),d("input"),e._v("类型，所以他们被视为不同类型）即可。")]),e._v(" "),d("h2",{attrs:{id:"patchvnode"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#patchvnode"}},[e._v("#")]),e._v(" patchVnode")]),e._v(" "),d("p",[e._v("之前patch的过程还剩下 "),d("code",[e._v("patchVnode")]),e._v(" 这个函数没有讲，这也是最复杂的一个，我们现在来看一下。因为这个函数是在符合 "),d("code",[e._v("sameVnode")]),e._v(" 的条件下触发的，所以会进行「"),d("strong",[e._v("比对")]),e._v("」。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function patchVnode (oldVnode, vnode) {\n    if (oldVnode === vnode) {\n        return;\n    }\n\n    if (vnode.isStatic && oldVnode.isStatic && vnode.key === oldVnode.key) {\n        vnode.elm = oldVnode.elm;\n        vnode.componentInstance = oldVnode.componentInstance;\n        return;\n    }\n\n    const elm = vnode.elm = oldVnode.elm;\n    const oldCh = oldVnode.children;\n    const ch = vnode.children;\n\n    if (vnode.text) {\n        nodeOps.setTextContent(elm, vnode.text);\n    } else {\n        if (oldCh && ch && (oldCh !== ch)) {\n            updateChildren(elm, oldCh, ch);\n        } else if (ch) {\n            if (oldVnode.text) nodeOps.setTextContent(elm, '');\n            addVnodes(elm, null, ch, 0, ch.length - 1);\n        } else if (oldCh) {\n            removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n        } else if (oldVnode.text) {\n            nodeOps.setTextContent(elm, '')\n        }\n    }\n}\n\n")])])]),d("p",[e._v("首先在新老 VNode 节点相同的情况下，就不需要做任何改变了，直接 return 掉。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (oldVnode === vnode) {\n    return;\n}\n\n")])])]),d("p",[e._v("下面的这种情况也比较简单，在当新老 VNode 节点都是 "),d("code",[e._v("isStatic")]),e._v("（静态的），并且 "),d("code",[e._v("key")]),e._v(" 相同时，只要将 "),d("code",[e._v("componentInstance")]),e._v(" 与 "),d("code",[e._v("elm")]),e._v(" 从老 VNode 节点“拿过来”即可。这里的 "),d("code",[e._v("isStatic")]),e._v(" 也就是前面提到过的「编译」的时候会将静态节点标记出来，这样就可以跳过比对的过程。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (vnode.isStatic && oldVnode.isStatic && vnode.key === oldVnode.key) {\n    vnode.elm = oldVnode.elm;\n    vnode.componentInstance = oldVnode.componentInstance;\n    return;\n}\n\n")])])]),d("p",[e._v("接下来，当新 VNode 节点是文本节点的时候，直接用 "),d("code",[e._v("setTextContent")]),e._v(" 来设置 text，这里的 "),d("code",[e._v("nodeOps")]),e._v(" 是一个适配层，根据不同平台提供不同的操作平台 DOM 的方法，实现跨平台。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (vnode.text) {\n    nodeOps.setTextContent(elm, vnode.text);\n}\n\n")])])]),d("p",[e._v("当新 VNode 节点是非文本节点当时候，需要分几种情况。")]),e._v(" "),d("ul",[d("li",[d("code",[e._v("oldCh")]),e._v(" 与 "),d("code",[e._v("ch")]),e._v(" 都存在且不相同时，使用 "),d("code",[e._v("updateChildren")]),e._v(" 函数来更新子节点，这个后面重点讲。")]),e._v(" "),d("li",[e._v("如果只有 "),d("code",[e._v("ch")]),e._v(" 存在的时候，如果老节点是文本节点则先将节点的文本清除，然后将 "),d("code",[e._v("ch")]),e._v(" 批量插入插入到节点elm下。")]),e._v(" "),d("li",[e._v("同理当只有 "),d("code",[e._v("oldch")]),e._v(" 存在时，说明需要将老节点通过 "),d("code",[e._v("removeVnodes")]),e._v(" 全部清除。")]),e._v(" "),d("li",[e._v("最后一种情况是当只有老节点是文本节点的时候，清除其节点文本内容。")])]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (oldCh && ch && (oldCh !== ch)) {\n    updateChildren(elm, oldCh, ch);\n} else if (ch) {\n    if (oldVnode.text) nodeOps.setTextContent(elm, '');\n    addVnodes(elm, null, ch, 0, ch.length - 1);\n} else if (oldCh) {\n    removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n} else if (oldVnode.text) {\n    nodeOps.setTextContent(elm, '')\n}\n\n")])])]),d("h2",{attrs:{id:"updatechildren"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#updatechildren"}},[e._v("#")]),e._v(" updateChildren")]),e._v(" "),d("p",[e._v("接下来就要讲一下 "),d("code",[e._v("updateChildren")]),e._v(" 函数了。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function updateChildren (parentElm, oldCh, newCh) {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (!oldStartVnode) {\n            oldStartVnode = oldCh[++oldStartIdx];\n        } else if (!oldEndVnode) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        } else if (sameVnode(oldStartVnode, newStartVnode)) {\n            patchVnode(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        } else if (sameVnode(oldEndVnode, newEndVnode)) {\n            patchVnode(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        } else if (sameVnode(oldStartVnode, newEndVnode)) {\n            patchVnode(oldStartVnode, newEndVnode);\n            nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        } else if (sameVnode(oldEndVnode, newStartVnode)) {\n            patchVnode(oldEndVnode, newStartVnode);\n            nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        } else {\n            let elmToMove = oldCh[idxInOld];\n            if (!oldKeyToIdx) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            idxInOld = newStartVnode.key ? oldKeyToIdx[newStartVnode.key] : null;\n            if (!idxInOld) {\n                createElm(newStartVnode, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            } else {\n                elmToMove = oldCh[idxInOld];\n                if (sameVnode(elmToMove, newStartVnode)) {\n                    patchVnode(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                } else {\n                    createElm(newStartVnode, parentElm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n    }\n\n    if (oldStartIdx > oldEndIdx) {\n        refElm = (newCh[newEndIdx + 1]) ? newCh[newEndIdx + 1].elm : null;\n        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx);\n    } else if (newStartIdx > newEndIdx) {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n}\n\n")])])]),d("p",[e._v("看到代码那么多先不要着急，我们还是一点一点地讲解。")]),e._v(" "),d("p",[e._v("首先我们定义 "),d("code",[e._v("oldStartIdx")]),e._v("、"),d("code",[e._v("newStartIdx")]),e._v("、"),d("code",[e._v("oldEndIdx")]),e._v(" 以及 "),d("code",[e._v("newEndIdx")]),e._v(" 分别是新老两个 VNode 的两边的索引，同时 "),d("code",[e._v("oldStartVnode")]),e._v("、"),d("code",[e._v("newStartVnode")]),e._v("、"),d("code",[e._v("oldEndVnode")]),e._v(" 以及 "),d("code",[e._v("newEndVnode")]),e._v(" 分别指向这几个索引对应的 VNode 节点。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b707df4902029?w=885&h=397&f=jpeg&s=29388",alt:""}})]),e._v(" "),d("p",[e._v("接下来是一个 "),d("code",[e._v("while")]),e._v(" 循环，在这过程中，"),d("code",[e._v("oldStartIdx")]),e._v("、"),d("code",[e._v("newStartIdx")]),e._v("、"),d("code",[e._v("oldEndIdx")]),e._v(" 以及 "),d("code",[e._v("newEndIdx")]),e._v(" 会逐渐向中间靠拢。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) \n\n")])])]),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b70ecf5967f0a?w=864&h=428&f=png&s=30471",alt:""}})]),e._v(" "),d("p",[e._v("首先当 "),d("code",[e._v("oldStartVnode")]),e._v(" 或者 "),d("code",[e._v("oldEndVnode")]),e._v(" 不存在的时候，"),d("code",[e._v("oldStartIdx")]),e._v(" 与 "),d("code",[e._v("oldEndIdx")]),e._v(" 继续向中间靠拢，并更新对应的 "),d("code",[e._v("oldStartVnode")]),e._v(" 与 "),d("code",[e._v("oldEndVnode")]),e._v(" 的指向（注：下面讲到的 "),d("code",[e._v("oldStartIdx")]),e._v("、"),d("code",[e._v("newStartIdx")]),e._v("、"),d("code",[e._v("oldEndIdx")]),e._v(" 以及 "),d("code",[e._v("newEndIdx")]),e._v(" 移动都会伴随着 "),d("code",[e._v("oldStartVnode")]),e._v("、"),d("code",[e._v("newStartVnode")]),e._v("、"),d("code",[e._v("oldEndVnode")]),e._v(" 以及 "),d("code",[e._v("newEndVnode")]),e._v(" 的指向的变化，之后的部分只会讲 "),d("code",[e._v("Idx")]),e._v(" 的移动）。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (!oldStartVnode) {\n    oldStartVnode = oldCh[++oldStartIdx];\n} else if (!oldEndVnode) {\n    oldEndVnode = oldCh[--oldEndIdx];\n}\n\n")])])]),d("p",[e._v("接下来这一块，是将 "),d("code",[e._v("oldStartIdx")]),e._v("、"),d("code",[e._v("newStartIdx")]),e._v("、"),d("code",[e._v("oldEndIdx")]),e._v(" 以及 "),d("code",[e._v("newEndIdx")]),e._v(" 两两比对的过程，一共会出现 2*2=4 种情况。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v(" else if (sameVnode(oldStartVnode, newStartVnode)) {\n    patchVnode(oldStartVnode, newStartVnode);\n    oldStartVnode = oldCh[++oldStartIdx];\n    newStartVnode = newCh[++newStartIdx];\n} else if (sameVnode(oldEndVnode, newEndVnode)) {\n    patchVnode(oldEndVnode, newEndVnode);\n    oldEndVnode = oldCh[--oldEndIdx];\n    newEndVnode = newCh[--newEndIdx];\n} else if (sameVnode(oldStartVnode, newEndVnode)) {\n    patchVnode(oldStartVnode, newEndVnode);\n    nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n    oldStartVnode = oldCh[++oldStartIdx];\n    newEndVnode = newCh[--newEndIdx];\n} else if (sameVnode(oldEndVnode, newStartVnode)) {\n    patchVnode(oldEndVnode, newStartVnode);\n    nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n    oldEndVnode = oldCh[--oldEndIdx];\n    newStartVnode = newCh[++newStartIdx];\n} \n\n")])])]),d("p",[e._v("首先是 "),d("code",[e._v("oldStartVnode")]),e._v(" 与 "),d("code",[e._v("newStartVnode")]),e._v(" 符合 "),d("code",[e._v("sameVnode")]),e._v(" 时，说明老 VNode 节点的头部与新 VNode 节点的头部是相同的 VNode 节点，直接进行 "),d("code",[e._v("patchVnode")]),e._v("，同时 "),d("code",[e._v("oldStartIdx")]),e._v(" 与 "),d("code",[e._v("newStartIdx")]),e._v(" 向后移动一位。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b71f5a48631f4?w=618&h=251&f=png&s=19993",alt:""}})]),e._v(" "),d("p",[e._v("其次是 "),d("code",[e._v("oldEndVnode")]),e._v(" 与 "),d("code",[e._v("newEndVnode")]),e._v(" 符合 "),d("code",[e._v("sameVnode")]),e._v("，也就是两个 VNode 的结尾是相同的 VNode，同样进行 "),d("code",[e._v("patchVnode")]),e._v(" 操作并将 "),d("code",[e._v("oldEndVnode")]),e._v(" 与 "),d("code",[e._v("newEndVnode")]),e._v(" 向前移动一位。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b7228b9ecb23a?w=753&h=235&f=png&s=20727",alt:""}})]),e._v(" "),d("p",[e._v("接下来是两种交叉的情况。")]),e._v(" "),d("p",[e._v("先是 "),d("code",[e._v("oldStartVnode")]),e._v(" 与 "),d("code",[e._v("newEndVnode")]),e._v(" 符合 "),d("code",[e._v("sameVnode")]),e._v(" 的时候，也就是老 VNode 节点的头部与新 VNode 节点的尾部是同一节点的时候，将 "),d("code",[e._v("oldStartVnode.elm")]),e._v(" 这个节点直接移动到 "),d("code",[e._v("oldEndVnode.elm")]),e._v(" 这个节点的后面即可。然后 "),d("code",[e._v("oldStartIdx")]),e._v(" 向后移动一位，"),d("code",[e._v("newEndIdx")]),e._v(" 向前移动一位。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b723af0fd706a?w=1540&h=776&f=png&s=105982",alt:""}})]),e._v(" "),d("p",[e._v("同理，"),d("code",[e._v("oldEndVnode")]),e._v(" 与 "),d("code",[e._v("newStartVnode")]),e._v(" 符合 "),d("code",[e._v("sameVnode")]),e._v(" 时，也就是老 VNode 节点的尾部与新 VNode 节点的头部是同一节点的时候，将 "),d("code",[e._v("oldEndVnode.elm")]),e._v(" 插入到 "),d("code",[e._v("oldStartVnode.elm")]),e._v(" 前面。同样的，"),d("code",[e._v("oldEndIdx")]),e._v(" 向前移动一位，"),d("code",[e._v("newStartIdx")]),e._v(" 向后移动一位。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b72ae720954cd?w=810&h=432&f=png&s=42179",alt:""}})]),e._v(" "),d("p",[e._v("最后是当以上情况都不符合的时候，这种情况怎么处理呢？")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("else {\n    let elmToMove = oldCh[idxInOld];\n    if (!oldKeyToIdx) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n    idxInOld = newStartVnode.key ? oldKeyToIdx[newStartVnode.key] : null;\n    if (!idxInOld) {\n        createElm(newStartVnode, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n    } else {\n        elmToMove = oldCh[idxInOld];\n        if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode);\n            oldCh[idxInOld] = undefined;\n            nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n        } else {\n            createElm(newStartVnode, parentElm);\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n    let i, key\n    const map = {}\n    for (i = beginIdx; i <= endIdx; ++i) {\n        key = children[i].key\n        if (isDef(key)) map[key] = i\n    }\n    return map\n}\n\n")])])]),d("p",[d("code",[e._v("createKeyToOldIdx")]),e._v(" 的作用是产生 "),d("code",[e._v("key")]),e._v(" 与 "),d("code",[e._v("index")]),e._v(" 索引对应的一个 map 表。比如说：")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("[\n    {xx: xx, key: 'key0'},\n    {xx: xx, key: 'key1'}, \n    {xx: xx, key: 'key2'}\n]\n\n")])])]),d("p",[e._v("在经过 "),d("code",[e._v("createKeyToOldIdx")]),e._v(" 转化以后会变成：")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("{\n    key0: 0, \n    key1: 1, \n    key2: 2\n}\n\n")])])]),d("p",[e._v("我们可以根据某一个 key 的值，快速地从 "),d("code",[e._v("oldKeyToIdx")]),e._v("（"),d("code",[e._v("createKeyToOldIdx")]),e._v(" 的返回值）中获取相同 key 的节点的索引 "),d("code",[e._v("idxInOld")]),e._v("，然后找到相同的节点。")]),e._v(" "),d("p",[e._v("如果没有找到相同的节点，则通过 "),d("code",[e._v("createElm")]),e._v(" 创建一个新节点，并将 "),d("code",[e._v("newStartIdx")]),e._v(" 向后移动一位。")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (!idxInOld) {\n    createElm(newStartVnode, parentElm);\n    newStartVnode = newCh[++newStartIdx];\n}\n\n")])])]),d("p",[e._v("否则如果找到了节点，同时它符合 "),d("code",[e._v("sameVnode")]),e._v("，则将这两个节点进行 "),d("code",[e._v("patchVnode")]),e._v("，将该位置的老节点赋值 undefined（之后如果还有新节点与该节点key相同可以检测出来提示已有重复的 key ），同时将 "),d("code",[e._v("newStartVnode.elm")]),e._v(" 插入到 "),d("code",[e._v("oldStartVnode.elm")]),e._v(" 的前面。同理，"),d("code",[e._v("newStartIdx")]),e._v(" 往后移动一位。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b73aa8f758342?w=750&h=373&f=png&s=38696",alt:""}})]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("else {\n    elmToMove = oldCh[idxInOld];\n    if (sameVnode(elmToMove, newStartVnode)) {\n        patchVnode(elmToMove, newStartVnode);\n        oldCh[idxInOld] = undefined;\n        nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n        newStartVnode = newCh[++newStartIdx];\n    }\n}\n\n")])])]),d("p",[e._v("如果不符合 "),d("code",[e._v("sameVnode")]),e._v("，只能创建一个新节点插入到 "),d("code",[e._v("parentElm")]),e._v(" 的子节点中，"),d("code",[e._v("newStartIdx")]),e._v(" 往后移动一位。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b73f50ed43932?w=927&h=462&f=png&s=44122",alt:""}})]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("else {\n    createElm(newStartVnode, parentElm);\n    newStartVnode = newCh[++newStartIdx];\n}\n\n")])])]),d("p",[e._v("最后一步就很容易啦，当 "),d("code",[e._v("while")]),e._v(" 循环结束以后，如果 "),d("code",[e._v("oldStartIdx > oldEndIdx")]),e._v("，说明老节点比对完了，但是新节点还有多的，需要将新节点插入到真实 DOM 中去，调用 "),d("code",[e._v("addVnodes")]),e._v(" 将这些节点插入即可。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b7457cae26687?w=784&h=373&f=png&s=32202",alt:""}})]),e._v(" "),d("p",[e._v("同理，如果满足 "),d("code",[e._v("newStartIdx > newEndIdx")]),e._v(" 条件，说明新节点比对完了，老节点还有多，将这些无用的老节点通过 "),d("code",[e._v("removeVnodes")]),e._v(" 批量删除即可。")]),e._v(" "),d("p",[d("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/1/2/160b744a2c07257d?w=836&h=367&f=png&s=34864",alt:""}})]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("if (oldStartIdx > oldEndIdx) {\n    refElm = (newCh[newEndIdx + 1]) ? newCh[newEndIdx + 1].elm : null;\n    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx);\n} else if (newStartIdx > newEndIdx) {\n    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n}\n\n")])])]),d("p",[e._v("到这里，比对的核心实现已经讲完了，这部分比较复杂，不过仔细地梳理一下比对的过程，相信一定能够理解得更加透彻的。")]),e._v(" "),d("p",[e._v("注：本节代码参考"),d("a",{attrs:{href:"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E6%97%B6%E7%9A%84%E5%B7%AE%E5%BC%82%20diff%20%E5%8F%8A%20patch%20%E6%9C%BA%E5%88%B6%E3%80%8B.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("《数据状态更新时的差异 diff 及 patch 机制》"),d("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);n.default=o.exports}}]);